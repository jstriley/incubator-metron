---
- set_fact:
    metron_jar_path: "{{ playbook_dir }}/../../metron-streaming/Metron-Topologies/target/{{ metron_jar_name }}"

# - name: Build Metron streaming
#   shell: "{{ item }}"
#   args:
#     chdir: "{{ playbook_dir }}../../../opensoc-streaming"
#     creates: "{{ metron_jar_path }}"
#   with_items:
#     - mvn package

- name: Create Metron streaming directories
  file: path="{{ metron_directory }}/{{ item.name }}"  state=directory mode=0755
  with_items:
      - { name: 'lib'}
      - { name: 'config'}

- name: Copy Metron streaming jars
  copy:
    src: "{{ metron_jar_path }}"
    dest: "{{ metron_directory }}/lib/"

- name: Alternatives link for "java"
  alternatives: name={{ item.name }} link={{ item.link }}  path={{ item.path }}
  with_items:
    - { name: java, link: /usr/bin/java, path: /usr/jdk64/jdk1.8.0_40/bin/java}
    - { name: jar, link: /usr/bin/jar, path: /usr/jdk64/jdk1.8.0_40/bin/jar}

- name: Add hbase-site.xml to topology jar
  shell: cd /etc/hbase/conf/ && jar -uf {{ metron_directory }}/lib/{{ metron_jar_name }} hbase-site.xml

- name: Add elasticsearch.ym to topology jar
  shell: cd /etc/elasticsearch && jar -uf {{ metron_directory }}/lib/{{ metron_jar_name }} elasticsearch.yml

- name: Download Metron topology config templates
  get_url: url={{ metron_source_url }} dest=/tmp/metron_source.zip

- name: Unpack Metron source
  unarchive: src=/tmp/metron_source.zip dest=/tmp copy=no

- name: Copy unpacked environment configs to config directory
  command: cp -r /tmp/incubator-metron-{{ metron_branch }}/metron-streaming/Metron-Topologies/src/main/resources/Metron_Configs/etc {{ metron_directory }}/config

- name: Copy unpacked topology configs to config directory
  command: cp -r /tmp/incubator-metron-{{ metron_branch }}/metron-streaming/Metron-Topologies/src/main/resources/Metron_Configs/topologies {{ metron_directory }}/config

- name: Cleanup unpacked topology configs
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/metron_source.zip"
    - "/tmp/incubator-metron-{{ metron_branch }}"

- name: Configure config.properties
  lineinfile: >
    dest={{ metron_directory }}/config/etc/env/config.properties
    regexp="{{ item.regexp }}"
    line="{{ item.line }}"
    state=present
  with_items:
    - { regexp: "kafka.zk=", line: "kafka.zk={{ zookeeper_url }}" }
    - { regexp: "spout.kafka.topic.pcap=", line: "spout.kafka.topic.pcap={{ pycapa_topic }}" }
    - { regexp: "es.ip=", line: "es.ip={{ elasticsearch_ip }}" }
    - { regexp: "es.port=", line: "es.port={{ elasticsearch_transport_port }}" }
    - { regexp: "es.clustername=", line: "es.clustername={{ elasticsearch_cluster_name }}" }
    - { regexp: "bolt.hdfs.file.system.url=", line: "bolt.hdfs.file.system.url={{ hdfs_url }}" }

- name: Create HBase tables
  shell: echo "create 'pcap_test','t'" | hbase shell -n
  ignore_errors: yes

- name: Submit Pcap topology
  command: storm jar {{ metron_directory }}/lib/{{ metron_jar_name }} org.apache.storm.flux.Flux --remote {{ metron_directory }}/config/topologies/pcap/remote.yaml --filter {{ metron_directory }}/config/etc/env/config.properties
  ignore_errors: yes
