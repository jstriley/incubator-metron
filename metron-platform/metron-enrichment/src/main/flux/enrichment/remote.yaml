# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "enrichment"
config:
    topology.workers: 30
    topology.acker.executors: 30


components:
# Enrichment
    #Geo enrichment
    -   id: "jdbcConfig"
        className: "org.apache.metron.enrichment.adapters.jdbc.MySqlConfig"
        properties:
            -   name: "host"
                value: "${mysql.ip}"
            -   name: "port"
                value: ${mysql.port}
            -   name: "username"
                value: "${mysql.username}"
            -   name: "password"
                value: "${mysql.password}"
            -   name: "table"
                value: "GEO"
    -   id: "geoEnrichmentAdapter"
        className: "org.apache.metron.enrichment.adapters.geo.GeoAdapter"
        configMethods:
            -   name: "withJdbcConfig"
                args:
                    - ref: "jdbcConfig"
    -   id: "geoEnrichment"
        className: "org.apache.metron.enrichment.configuration.Enrichment"
        constructorArgs:
            -   "geo"
            -   ref: "geoEnrichmentAdapter"
    #GRPC enrichment
      #Create the config that the adapter will use, setting the appropriate variables
    -   id: "grpcClientConfig"
        className: "org.apache.metron.enrichment.adapters.grpc.GrpcClientConfig"
        properties:
            -   name: "host"
                value: "localhost"
            -   name: "port"
                value: 50051
      #Create the enrichment adapter using the config
    -   id: "grpcEnrichmentAdapter"
        className: "org.apache.metron.enrichment.adapters.grpc.GrpcClientAdapter"
        configMethods:
            -   name: "withConfig"
                args:
                    - ref: "grpcClientConfig"
      #Create the enrichment object from the enrichment adapter
    -   id: "grpcEnrichment"
        className: "org.apache.metron.enrichment.configuration.Enrichment"
        constructorArgs:
            -   "grpc"
            -   ref: "grpcEnrichmentAdapter"
    #Host enrichment
    className:
    -   id: "hostEnrichmentAdapter"
        className: "org.apache.metron.enrichment.adapters.host.HostFromJSONListAdapter"
        constructorArgs:
            - '${org.apache.metron.enrichment.host.known_hosts}'
    -   id: "hostEnrichment"
        className: "org.apache.metron.enrichment.configuration.Enrichment"
        constructorArgs:
            -   "host"
            -   ref: "hostEnrichmentAdapter"
    #HBase enrichment
    -   id: "simpleHBaseEnrichmentConfig"
        className: "org.apache.metron.enrichment.adapters.simplehbase.SimpleHBaseConfig"
        configMethods:
            -   name: "withProviderImpl"
                args:
                    - "${hbase.provider.impl}"
            -   name: "withHBaseTable"
                args:
                    - "${enrichment.simple.hbase.table}"
            -   name: "withHBaseCF"
                args:
                    - "${enrichment.simple.hbase.cf}"
    -   id: "simpleHBaseEnrichmentAdapter"
        className: "org.apache.metron.enrichment.adapters.simplehbase.SimpleHBaseAdapter"
        configMethods:
           -    name: "withConfig"
                args:
                    - ref: "simpleHBaseEnrichmentConfig"
    -   id: "simpleHBaseEnrichment"
        className: "org.apache.metron.enrichment.configuration.Enrichment"
        constructorArgs:
          -   "hbaseEnrichment"
          -   ref: "simpleHBaseEnrichmentAdapter"
    #An arraylist of the enrichments to use
    -   id: "enrichments"
        className: "java.util.ArrayList"
        configMethods:
            -   name: "add"
                args:
                    - ref: "grpcEnrichment"
            -   name: "add"
                args:
                    - ref: "geoEnrichment"
#Commenting out other enrichments so that we only add GRPC and geo
#            -   name: "add"
#                args:
#                    - ref: "hostEnrichment"
#            -   name: "add"
#                args:
#                    - ref: "simpleHBaseEnrichment"
# Threat Intel
    -   id: "simpleHBaseThreatIntelConfig"
        className: "org.apache.metron.enrichment.adapters.threatintel.ThreatIntelConfig"
        configMethods:
            -   name: "withProviderImpl"
                args:
                    - "${hbase.provider.impl}"
            -   name: "withTrackerHBaseTable"
                args:
                    - "${threat.intel.tracker.table}"
            -   name: "withTrackerHBaseCF"
                args:
                    - "${threat.intel.tracker.cf}"
            -   name: "withHBaseTable"
                args:
                    - "${threat.intel.simple.hbase.table}"
            -   name: "withHBaseCF"
                args:
                    - "${threat.intel.simple.hbase.cf}"
    -   id: "simpleHBaseThreatIntelAdapter"
        className: "org.apache.metron.enrichment.adapters.threatintel.ThreatIntelAdapter"
        configMethods:
           -    name: "withConfig"
                args:
                    - ref: "simpleHBaseThreatIntelConfig"
    -   id: "simpleHBaseThreatIntelEnrichment"
        className: "org.apache.metron.enrichment.configuration.Enrichment"
        constructorArgs:
          -   "hbaseThreatIntel"
          -   ref: "simpleHBaseThreatIntelAdapter"

    -   id: "threatIntels"
        className: "java.util.ArrayList"
        configMethods:
            -   name: "add"
                args:
                    - ref: "simpleHBaseThreatIntelEnrichment"

    -   id: "fileNameFormat"
        className: "org.apache.storm.hdfs.bolt.format.DefaultFileNameFormat"
        configMethods:
            -   name: "withPrefix"
                args:
                    - "enrichment-"
            -   name: "withExtension"
                args:
                  - ".json"
            -   name: "withPath"
                args:
                    - "${index.hdfs.output}"

    -   id: "hdfsRotationPolicy"
        className: "${bolt.hdfs.rotation.policy}"
        constructorArgs:
          -  ${bolt.hdfs.rotation.policy.count}
          - "${bolt.hdfs.rotation.policy.units}"
#indexing
    -   id: "hdfsWriter"
        className: "org.apache.metron.writer.hdfs.HdfsWriter"
        configMethods:
            -   name: "withFileNameFormat"
                args:
                    - ref: "fileNameFormat"
            -   name: "withRotationPolicy"
                args:
                    - ref: "hdfsRotationPolicy"
    -   id: "errorWriter"
        className: "org.apache.metron.common.writer.NoopWriter"
    -   id: "indexWriter"
        className: "${writer.class.name}"

#kafka/zookeeper
    -   id: "zkHosts"
        className: "storm.kafka.ZkHosts"
        constructorArgs:
            - "${kafka.zk}"
    -   id: "kafkaConfig"
        className: "storm.kafka.SpoutConfig"
        constructorArgs:
            # zookeeper hosts
            - ref: "zkHosts"
            # topic name
            - "enrichments"
            # zk root
            - ""
            # id
            - "enrichments"
        properties:
            -   name: "ignoreZkOffsets"
                value: false
            -   name: "startOffsetTime"
                value: -1
            -   name: "fetchSizeBytes"
                value: 10485760
            -   name: "bufferSizeBytes"
                value: 10485760

spouts:
    -   id: "kafkaSpout"
        className: "storm.kafka.KafkaSpout"
        constructorArgs:
            - ref: "kafkaConfig"
        parallelism: 10
bolts:
# Enrichment Bolts
    -   id: "enrichmentSplitBolt"
        className: "org.apache.metron.enrichment.bolt.EnrichmentSplitterBolt"
        constructorArgs:
            - "${kafka.zk}"
        configMethods:
            -   name: "withEnrichments"
                args:
                    - ref: "enrichments"
        parallelism: 45

#The configs for the actual Storm bolts used in enrichment
#They use the adapters and enrichment objects created above
    #Geo Enrichment Bolt
    -   id: "geoEnrichmentBolt"
        className: "org.apache.metron.enrichment.bolt.GenericEnrichmentBolt"
        constructorArgs:
            - "${kafka.zk}"
        configMethods:
            -   name: "withEnrichment"
                args:
                    - ref: "geoEnrichment"
            -   name: "withMaxCacheSize"
                args: [10000]
            -   name: "withMaxTimeRetain"
                args: [10]
    #GRPC Enrichment Bolt
    -   id: "grpcEnrichmentBolt"
        className: "org.apache.metron.enrichment.bolt.GenericEnrichmentBolt"
        constructorArgs:
            - "${kafka.zk}"
        configMethods:
            -   name: "withEnrichment"
                args:
                    - ref: "grpcEnrichment"
            -   name: "withMaxCacheSize"
                args: [10000]
            -   name: "withMaxTimeRetain"
                args: [10]
    #Host Enrichment Bolt
#    -   id: "hostEnrichmentBolt"
#        className: "org.apache.metron.enrichment.bolt.GenericEnrichmentBolt"
#        constructorArgs:
#            - "${kafka.zk}"
#        configMethods:
#            -   name: "withEnrichment"
#                args:
#                    - ref: "hostEnrichment"
#            -   name: "withMaxCacheSize"
#                args: [10000]
#            -   name: "withMaxTimeRetain"
#                args: [10]
#    -   id: "simpleHBaseEnrichmentBolt"
#        className: "org.apache.metron.enrichment.bolt.GenericEnrichmentBolt"
#        constructorArgs:
#            - "${kafka.zk}"
#        configMethods:
#            -   name: "withEnrichment"
#                args:
#                    - ref: "simpleHBaseEnrichment"
#            -   name: "withMaxCacheSize"
#                args: [10000]
#            -   name: "withMaxTimeRetain"
#                args: [10]
#
#The Enrichment Join Bolt
    -   id: "enrichmentJoinBolt"
        className: "org.apache.metron.enrichment.bolt.EnrichmentJoinBolt"
        constructorArgs:
            - "${kafka.zk}"
        configMethods:
            -   name: "withMaxCacheSize"
                args: [10000]
            -   name: "withMaxTimeRetain"
                args: [10]
#
## Threat Intel Bolts
#    -   id: "threatIntelSplitBolt"
#        className: "org.apache.metron.enrichment.bolt.ThreatIntelSplitterBolt"
#        constructorArgs:
#            - "${kafka.zk}"
#        configMethods:
#            -   name: "withEnrichments"
#                args:
#                    - ref: "threatIntels"
#            -   name: "withMessageFieldName"
#                args: ["message"]
#    -   id: "simpleHBaseThreatIntelBolt"
#        className: "org.apache.metron.enrichment.bolt.GenericEnrichmentBolt"
#        constructorArgs:
#            - "${kafka.zk}"
#        configMethods:
#            -   name: "withEnrichment"
#                args:
#                    - ref: "simpleHBaseThreatIntelEnrichment"
#            -   name: "withMaxCacheSize"
#                args: [10000]
#            -   name: "withMaxTimeRetain"
#                args: [10]
#    -   id: "threatIntelJoinBolt"
#        className: "org.apache.metron.enrichment.bolt.ThreatIntelJoinBolt"
#        constructorArgs:
#            - "${kafka.zk}"
#        configMethods:
#            -   name: "withMaxCacheSize"
#                args: [10000]
#            -   name: "withMaxTimeRetain"
#                args: [10]
# Indexing Bolts
    -   id: "indexingBolt"
        className: "org.apache.metron.enrichment.bolt.BulkMessageWriterBolt"
        constructorArgs:
            - "${kafka.zk}"
        configMethods:
            -   name: "withBulkMessageWriter"
                args:
                    - ref: "indexWriter"
        parallelism: 20
    -   id: "errorBolt"
        className: "org.apache.metron.enrichment.bolt.BulkMessageWriterBolt"
        constructorArgs:
            - "${kafka.zk}"
        configMethods:
            -   name: "withBulkMessageWriter"
                args:
                    - ref: "errorWriter"
        parallelism: 4
#    -   id: "hdfsIndexingBolt"
#        className: "org.apache.metron.enrichment.bolt.BulkMessageWriterBolt"
#        constructorArgs:
#            - "${kafka.zk}"
#        configMethods:
#            -   name: "withBulkMessageWriter"
#                args:
#                    - ref: "hdfsWriter"


streams:
#parser
    #get the parsed data from the kafka spout to the splitter
    #to send the data to the enrichment bolts
    -   name: "spout -> splitter"
        from: "kafkaSpout"
        to: "enrichmentSplitBolt"
        grouping:
            type: SHUFFLE

#enrichment
     #send the data to be enriched from the splitter to the host adapter
#    -   name: "enrichmentSplit -> host"
#        from: "enrichmentSplitBolt"
#        to: "hostEnrichmentBolt"
#        grouping:
#            streamId: "host"
#            type: FIELDS
#            args: ["key"]
     #send the data to be enriched from the splitter to the geo adapter
    -   name: "enrichmentSplit -> geo"
        from: "enrichmentSplitBolt"
        to: "geoEnrichmentBolt"
        grouping:
            streamId: "geo"
            type: FIELDS
            args: ["key"]
     #send the data to be enriched from the splitter to the grpc adapter
    -   name: "enrichmentSplit -> grpc"
        from: "enrichmentSplitBolt"
        to: "grpcEnrichmentBolt"
        grouping:
            streamId: "grpc"
            type: FIELDS
            args: ["key"]
     #send the data to be enriched from the splitter to the hbase adapter
#    -   name: "enrichmentSplit -> simpleHBaseEnrichmentBolt"
#        from: "enrichmentSplitBolt"
#        to: "simpleHBaseEnrichmentBolt"
#        grouping:
#            streamId: "hbaseEnrichment"
#            type: FIELDS
#            args: ["key"]
#
     #get the un-enriched data from the splitter to the join
     #so that we retain the original message in the final message
    -   name: "splitter -> join"
        from: "enrichmentSplitBolt"
        to: "enrichmentJoinBolt"
        grouping:
            streamId: "message"
            type: FIELDS
            args: ["key"]
     #get the data from the geo enricher to the join so we
     #can add those fields to the final message
    -   name: "geo -> join"
        from: "geoEnrichmentBolt"
        to: "enrichmentJoinBolt"
        grouping:
            streamId: "geo"
            type: FIELDS
            args: ["key"]
     #get the data from the grpc enricher to the join so we
     #can add those fields to the final message
    -   name: "grpc -> join"
        from: "grpcEnrichmentBolt"
        to: "enrichmentJoinBolt"
        grouping:
            streamId: "grpc"
            type: FIELDS
            args: ["key"]

#
     #get the data from the hbase enricher to the join so we
     #can add those fields to the final message
#    -   name: "simpleHBaseEnrichmentBolt -> join"
#        from: "simpleHBaseEnrichmentBolt"
#        to: "enrichmentJoinBolt"
#        grouping:
#            streamId: "hbaseEnrichment"
#            type: FIELDS
#            args: ["key"]
#
     #get the data from the host enricher to the join so we
     #can add those fields to the final message
#    -   name: "host -> join"
#        from: "hostEnrichmentBolt"
#        to: "enrichmentJoinBolt"
#        grouping:
#            streamId: "host"
#            type: FIELDS
#            args: ["key"]
#
##threat intel
#after the enrichments happen, pass the message on to the
#bolts for threat enrichment
#
     #send the data from the enrichment joiner to the threat intel splitter
#    -   name: "enrichmentJoin -> threatSplit"
#        from: "enrichmentJoinBolt"
#        to: "threatIntelSplitBolt"
#        grouping:
#            streamId: "message"
#            type: FIELDS
#            args: ["key"]
#
     #send data from the threat splitter to the thread into bolt
#    -   name: "threatSplit -> simpleHBaseThreatIntel"
#        from: "threatIntelSplitBolt"
#        to: "simpleHBaseThreatIntelBolt"
#        grouping:
#            streamId: "hbaseThreatIntel"
#            type: FIELDS
#            args: ["key"]
#
     #send the stream from the threat intel bolt to the joiner bolt
#    -   name: "simpleHBaseThreatIntel -> join"
#        from: "simpleHBaseThreatIntelBolt"
#        to: "threatIntelJoinBolt"
#        grouping:
#            streamId: "hbaseThreatIntel"
#            type: FIELDS
#            args: ["key"]
     #send the stream from the threat splitter to the joiner bolt
#    -   name: "threatIntelSplit -> threatIntelJoin"
#        from: "threatIntelSplitBolt"
#        to: "threatIntelJoinBolt"
#        grouping:
#            streamId: "message"
#            type: FIELDS
#            args: ["key"]
##indexing
     #send the data to from the threat intel join bolt to the index bolt
#    -   name: "threatIntelJoin -> indexing"
#        from: "threatIntelJoinBolt"
#        to: "indexingBolt"
#        grouping:
#            streamId: "message"
#            type: FIELDS
#            args: ["key"]

#    -   name: "threatIntelJoin -> hdfs"
#        from: "threatIntelJoinBolt"
#        to: "hdfsIndexingBolt"
#        grouping:
#            streamId: "message"
#            type: SHUFFLE

    #send the data straight from the enrichment split bolt to the indexing bolt
    #use this if you want to skip enrichment
#    -   name: "enrichmentSplitBolt -> indexingBolt"
#        from: "enrichmentSplitBolt"
#        to: "indexingBolt"
#        grouping:
#            streamId: "message"
#            type: SHUFFLE

    #send any errors from the indexing bolt to the error bolt
    -   name: "indexingBolt -> errorBolt"
        from: "indexingBolt"
        to: "errorBolt"
        grouping:
            streamId: "error"
            type: SHUFFLE