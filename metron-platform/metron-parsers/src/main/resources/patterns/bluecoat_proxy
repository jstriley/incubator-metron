# Forked from https://github.com/elasticsearch/logstash/tree/v1.4.0/patterns

USERNAME [a-zA-Z0-9._-]+
USER %{USERNAME:UNWANTED}
INT (?:[+-]?(?:[0-9]+))
BASE10NUM (?<![0-9.+-])(?>[+-]?(?:(?:[0-9]+(?:\.[0-9]+)?)|(?:\.[0-9]+)))
NUMBER (?:%{BASE10NUM:UNWANTED})
BASE16NUM (?<![0-9A-Fa-f])(?:[+-]?(?:0x)?(?:[0-9A-Fa-f]+))
BASE16FLOAT \b(?<![0-9A-Fa-f.])(?:[+-]?(?:0x)?(?:(?:[0-9A-Fa-f]+(?:\.[0-9A-Fa-f]*)?)|(?:\.[0-9A-Fa-f]+)))\b

POSINT \b(?:[1-9][0-9]*)\b
NONNEGINT \b(?:[0-9]+)\b
WORD \b\w+\b
NOTSPACE \S+
SPACE \s*
DATA .*?
GREEDYDATA .*
#QUOTEDSTRING (?:(?<!\\)(?:"(?:\\.|[^\\"])*"|(?:'(?:\\.|[^\\'])*')|(?:`(?:\\.|[^\\`])*`)))
QUOTEDSTRING (?>(?<!\\)(?>"(?>\\.|[^\\"]+)+"|""|(?>'(?>\\.|[^\\']+)+')|''|(?>`(?>\\.|[^\\`]+)+`)|``))
NULLABLEQUOTEDSTRING -|"[^"]*"

UUID [A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}

# Networking
MAC (?:%{CISCOMAC:UNWANTED}|%{WINDOWSMAC:UNWANTED}|%{COMMONMAC:UNWANTED})
CISCOMAC (?:(?:[A-Fa-f0-9]{4}\.){2}[A-Fa-f0-9]{4})
WINDOWSMAC (?:(?:[A-Fa-f0-9]{2}-){5}[A-Fa-f0-9]{2})
COMMONMAC (?:(?:[A-Fa-f0-9]{2}:){5}[A-Fa-f0-9]{2})
IPV6 ((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?
IPV4 (?<![0-9])(?:(?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))(?![0-9])
IP (?:%{IPV6:UNWANTED}|%{IPV4:UNWANTED})
HOSTNAME \b(?:[0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\.(?:[0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\.?|\b)
HOST %{HOSTNAME:UNWANTED}
IPORHOST (?:%{HOSTNAME:UNWANTED}|%{IP:UNWANTED})
HOSTPORT (?:%{IPORHOST}:%{POSINT:PORT})

# paths
PATH (?:%{UNIXPATH}|%{WINPATH})
UNIXPATH (?>/(?>[\w_%!$@:.,~-]+|\\.)*)+
#UNIXPATH (?<![\w\/])(?:/[^\/\s?*]*)+
TTY (?:/dev/(pts|tty([pq])?)(\w+)?/?(?:[0-9]+))
WINPATH (?>[A-Za-z]+:|\\)(?:\\[^\\?*]*)+
URIPROTO [A-Za-z]+(\+[A-Za-z+]+)?
URIHOST %{IPORHOST}(?::%{POSINT:port})?
# uripath comes loosely from RFC1738, but mostly from what Firefox
# doesn't turn into %XX
URIPATH (?:/[A-Za-z0-9$.+!*'(){},~:;=@#%_\-]*)+
#URIPARAM \?(?:[A-Za-z0-9]+(?:=(?:[^&]*))?(?:&(?:[A-Za-z0-9]+(?:=(?:[^&]*))?)?)*)?
URIPARAM \?[A-Za-z0-9$.+!*'|(){},~@#%&/=:;_?\-\[\]]*
URIPATHPARAM %{URIPATH}(?:%{URIPARAM})?
URI %{URIPROTO}://(?:%{USER}(?::[^@]*)?@)?(?:%{URIHOST})?(?:%{URIPATHPARAM})?

# Months: January, Feb, 3, 03, 12, December
MONTH \b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\b
MONTHNUM (?:0?[1-9]|1[0-2])
MONTHNUM2 (?:0[1-9]|1[0-2])
MONTHDAY (?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])


# Days: Monday, Tue, Thu, etc...
DAY (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?)

# Years?
YEAR (?>\d\d){1,2}
# Time: HH:MM:SS
#TIME \d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?
# I'm still on the fence about using grok to perform the time match,
# since it's probably slower.
# TIME %{POSINT<24}:%{POSINT<60}(?::%{POSINT<60}(?:\.%{POSINT})?)?
HOUR (?:2[0123]|[01]?[0-9])
MINUTE (?:[0-5][0-9])
# '60' is a leap second in most time standards and thus is valid.
SECOND (?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)
TIME (?!<[0-9])%{HOUR}:%{MINUTE}(?::%{SECOND})(?![0-9])
# datestamp is YYYY/MM/DD-HH:MM:SS.UUUU (or something like it)
DATE_US %{MONTHNUM}[/-]%{MONTHDAY}[/-]%{YEAR}
DATE_EU %{MONTHDAY}[./-]%{MONTHNUM}[./-]%{YEAR}
ISO8601_TIMEZONE (?:Z|[+-]%{HOUR}(?::?%{MINUTE}))
ISO8601_SECOND (?:%{SECOND}|60)
TIMESTAMP_ISO8601 %{YEAR:UNWANTED}-%{MONTHNUM:UNWANTED}-%{MONTHDAY:UNWANTED}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND:UNWANTED})?%{ISO8601_TIMEZONE}?
DATE %{DATE_US}|%{DATE_EU}
DATESTAMP %{DATE}[- ]%{TIME}
TZ (?:[PMCE][SD]T|UTC)
DATESTAMP_RFC822 %{DAY} %{MONTH} %{MONTHDAY} %{YEAR} %{TIME} %{TZ}
DATESTAMP_RFC2822 %{DAY}, %{MONTHDAY} %{MONTH} %{YEAR} %{TIME} %{ISO8601_TIMEZONE}
DATESTAMP_OTHER %{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{TZ} %{YEAR}
DATESTAMP_EVENTLOG %{YEAR}%{MONTHNUM2}%{MONTHDAY}%{HOUR}%{MINUTE}%{SECOND}
GREEDYDATA .*

# Syslog Dates: Month Day HH:MM:SS
SYSLOGTIMESTAMP %{MONTH} +%{MONTHDAY} %{TIME}
PROG (?:[\w._/%-]+)
SYSLOGPROG %{PROG:program}(?:\[%{POSINT:pid}\])?
SYSLOGHOST %{IPORHOST}
SYSLOGFACILITY <%{NONNEGINT:facility}.%{NONNEGINT:priority}>
HTTPDATE %{MONTHDAY}/%{MONTH}/%{YEAR}:%{TIME} %{INT}

# Shortcuts
QS %{QUOTEDSTRING:UNWANTED}

# Log formats
SYSLOGBASE %{SYSLOGTIMESTAMP:timestamp} (?:%{SYSLOGFACILITY} )?%{SYSLOGHOST:logsource} %{SYSLOGPROG}:

MESSAGESLOG %{SYSLOGBASE} %{DATA}

COMMONAPACHELOG %{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-)
COMBINEDAPACHELOG %{COMMONAPACHELOG} %{QS:referrer} %{QS:agent}

# Log Levels
LOGLEVEL ([A|a]lert|ALERT|[T|t]race|TRACE|[D|d]ebug|DEBUG|[N|n]otice|NOTICE|[I|i]nfo|INFO|[W|w]arn?(?:ing)?|WARN?(?:ING)?|[E|e]rr?(?:or)?|ERR?(?:OR)?|[C|c]rit?(?:ical)?|CRIT?(?:ICAL)?|[F|f]atal|FATAL|[S|s]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)

# Unknown fields will be declared as a single '-'. WORD alone will not capture this.
FIELDWORD %{WORD:UNWANTED}|-
FIELDBASE10NUM %{BASE10NUM:UNWANTED}|-
FIELDIP %{IP:UNWANTED}|-

# Bluecoat pattern
#BLUECOAT \A%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:timetaken} %{IP:cip} %{NUMBER:scstatus} %{WORD:saction} %{NUMBER:scbytes} %{NUMBER:csbytes} %{WORD:csmethod} %{WORD:csurischeme} %{HOST:cshost} %{NUMBER:ip_dst_port} %{URIPATH:csuripath} %{NOTSPACE:csuriquery} %{USERNAME:csusername} %{NOTSPACE:csauthgroup} %{NOTSPACE:shierarchy} %{NOTSPACE:ssupliername} %{NOTSPACE:rscontenttype} %{NOTSPACE:csreferer} %{QUOTEDSTRING:csuseragent} %{WORD:scfilterresult} %{QUOTEDSTRING:cscategories} %{NOTSPACE:xvirusid} %{IP:ip_src_addr} %{NOTSPACE:csauthtype}
#BLUECOAT \A%{TIMESTAMP_ISO8601:timestamp} %{BASE10NUM:time_taken} %{IP:ip_src_addr} %{BASE10NUM:http_status} %{WORD:saction} %{BASE10NUM:scbytes} %{BASE10NUM:csbytes} %{WORD:http_method} %{WORD:protocol} %{HOST:cshost} %{BASE10NUM:ip_dst_port} %{URIPATH:http_uripath} %{NOTSPACE:http_uriquery} %{USERNAME:csusername} %{NOTSPACE:csauthgroup} %{NOTSPACE:shierarchy} %{NOTSPACE:ssupliername} %{NOTSPACE:rscontenttype} %{NOTSPACE:http_referer} %{QUOTEDSTRING:http_useragent} %{WORD:scfilterresult} %{QUOTEDSTRING:cscategories} %{NOTSPACE:xvirusid} %{IP:proxy_ip_addr} %{NOTSPACE:csauthtype}
# Increased allowed characters on many fields, made URIPATH more restrictive
#BLUECOAT \A%{TIMESTAMP_ISO8601:timestamp} %{BASE10NUM:time_taken} %{IP:ip_src_addr} %{BASE10NUM:http_status} %{WORD:saction} %{BASE10NUM:scbytes} %{BASE10NUM:csbytes} %{NOTSPACE:http_method} %{WORD:protocol} %{NOTSPACE:cshost} %{BASE10NUM:ip_dst_port} %{URIPATH:http_uripath} %{URIPARAM:http_uriquery} %{NOTSPACE:csusername} %{NOTSPACE:csauthgroup} %{NOTSPACE:shierarchy} %{NOTSPACE:ssupliername} %{NOTSPACE:rscontenttype} %{NOTSPACE:http_referer} %{QUOTEDSTRING:http_useragent} %{WORD:scfilterresult} %{QUOTEDSTRING:cscategories} %{NOTSPACE:xvirusid} %{IP:proxy_ip_addr} %{NOTSPACE:csauthtype}


# KNOWN LIMITATION:  GROK WILL FAIL IF A QUOTED STRING ENDS WITH A \.  It will assume the \ is escaping the closing quote, and treat the pattern as unclosed.
# USING A CUSTOM PATTER OTHER THAN QUOTEDSTRING COULD WORK, BUT WE MUST DETERMINE WHETHER OR NOT BLUECOAT WOULD ESCAPE DOUBLE QUOTES IN A DOUBLE QUOTED STRING AND, IF SO, HOW IT HANDLES TRAILING BACKSLASHES SINCE BACKSLASHES ARE NOT NORMALLY ESCAPED.
# MY GUESS BASED ON THE LACK OF BACKSLASH ESCAPING IS THAT DOUBLE QUOTES ARE NOT ESCAPED, AND THE
# PATTERN SHOULD BE "[^"]*"
BLUECOAT \A%{TIMESTAMP_ISO8601:timestamp} %{FIELDBASE10NUM:time_taken} %{FIELDIP:ip_src_addr} %{FIELDBASE10NUM:http_status} %{FIELDWORD:saction} %{FIELDBASE10NUM:scbytes} %{FIELDBASE10NUM:csbytes} %{NOTSPACE:http_method} %{FIELDWORD:protocol} %{NOTSPACE:cshost} %{FIELDBASE10NUM:ip_dst_port} %{NOTSPACE:http_uripath} %{NOTSPACE:http_uriquery} %{NOTSPACE:csusername} %{NOTSPACE:csauthgroup} %{NOTSPACE:shierarchy} %{NOTSPACE:ssupliername} %{NOTSPACE:rscontenttype} %{NOTSPACE:http_referer} %{NULLABLEQUOTEDSTRING:http_useragent} %{NOTSPACE:scfilterresult} %{NULLABLEQUOTEDSTRING:cscategories} %{NOTSPACE:xvirusid} %{FIELDIP:proxy_ip_addr}\s?%{NOTSPACE:csauthtype}?
# The following line is the same as the above line with the exception of the last section ( %{NOTSPACE:csauthtype} )
#BLUECOAT \A%{TIMESTAMP_ISO8601:timestamp} %{FIELDBASE10NUM:time_taken} %{FIELDIP:ip_src_addr} %{FIELDBASE10NUM:http_status} %{FIELDWORD:saction} %{FIELDBASE10NUM:scbytes} %{FIELDBASE10NUM:csbytes} %{NOTSPACE:http_method} %{FIELDWORD:protocol} %{NOTSPACE:cshost} %{FIELDBASE10NUM:ip_dst_port} %{NOTSPACE:http_uripath} %{NOTSPACE:http_uriquery} %{NOTSPACE:csusername} %{NOTSPACE:csauthgroup} %{NOTSPACE:shierarchy} %{NOTSPACE:ssupliername} %{NOTSPACE:rscontenttype} %{NOTSPACE:http_referer} %{NULLABLEQUOTEDSTRING:http_useragent} %{NOTSPACE:scfilterresult} %{NULLABLEQUOTEDSTRING:cscategories} %{NOTSPACE:xvirusid} %{FIELDIP:proxy_ip_addr}