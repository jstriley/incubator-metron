#
#  Licensed to the Apache Software Foundation (ASF) under one or more
#  contributor license agreements.  See the NOTICE file distributed with
#  this work for additional information regarding copyright ownership.
#  The ASF licenses this file to You under the Apache License, Version 2.0
#  (the "License"); you may not use this file except in compliance with
#  the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
---
- name: Check for Metron jar path
  stat: path={{ hdp_utils_repo_path }}
  register: hdp_utils


- name: Install HDP-UTILs Repo
  get_url:
    url: "{{ rhel_hdp_utils_install_url }}"
    dest: /etc/yum.repos.d/HDP-UTILS.repo
  when: hdp_utils.stat.exists == False

- name: Install HDP-UTIL gpg key
  rpm_key:
    state: present
    key: http://pgp.mit.edu/pks/lookup?op=get&search=0xB9733A7A07513CAD
  when: hdp_utils.stat.exists == False

- name: Install Solr
  yum:
    name: lucidworks-hdpsearch
    state: present

- name: Create solr.xml from template
  template:
    src: solr.xml
    dest: "{{ solr_install_path }}/server/solr"
    mode: 0644
    owner: "{{ solr_user }}"
    group: "{{ solr_user }}"

- name: Copy solrschema.xml to {{ inventory_hostname }}
  copy:
    src: schema.xml
    dest: "{{ solr_config_dir }}"
    mode: 0644
    owner: "{{ solr_user }}"
    group: "{{ solr_user }}"

- name: Create solrconfig.xml from template
  template:
    src: solrconfig.xml
    dest: "{{ solr_config_dir }}"
    mode: 0644
    owner: "{{ solr_user }}"
    group: "{{ solr_user }}"

- name: Start Solr
  service:
    name: solr
    state: restarted
    enabled: yes

- name: Create Collection {{ solr_collection_name }} with {{ solr_number_shards }} shard(s) and replication factor {{ solr_replication_factor }}
  shell: "{{ solr_cmd }}"
  ignore_errors: yes
  register: result
  failed_when: result.rc == 1 and result.stderr.find("already exists!") == -1
